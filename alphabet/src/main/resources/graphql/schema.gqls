type ExerciseDto {
    id: ID!
    options: [String!]!
}

type ExercisesResponse {
    page: Int!
    size: Int!
    totalSize: Int!
    exercises: [ExerciseDto]!
}

type AnswerResponse {
    correct: Boolean!
    correctAnswer: String!
}

type Language {
    id: ID!
    name: String!
}

type Course {
    id: ID!
    name: String!
    description: String
    difficulty: String
}

type CourseData {
    id: ID!
    name: String!
    description: String
    difficulty: String
    premium: Boolean!
    language: Language
}

type Exercise {
    id: ID!
    letter: String
    wrongAnswer: String!
    correctAnswer: String!
    order: Int!
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
    VERY_HARD
}

type Query {
    courseExercises(course: Int, page: Int, amount: Int): ExercisesResponse!
    getLanguage(id: ID): Language!
    getLanguages(page: Int, amount: Int): [Language]!
    getCoursesForLanguage(languageId: ID, page: Int, amount: Int): [CourseData]!
}

type Mutation {
    answer(exercise: Int, guess: String): AnswerResponse!
    addLanguage(name: String): Language!
    editLanguage(languageId: ID, name: String): Language!
    addCourse(name: String, description: String, difficulty: Difficulty, languageId: Int): Course!
    editCourse(courseId: ID, name: String, description: String, difficulty: Difficulty, languageId: Int): Course!
    addExercise(letter: String, wrongAnswer: String, correctAnswer: String, courseId: Int): Exercise!
    editExercise(exerciseId: ID, letter: String, wrongAnswer: String, correctAnswer: String, courseId: Int): Exercise!
    reorderExercise(exerciseId: ID, order: Int): Exercise!
}
